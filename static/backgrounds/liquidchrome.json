{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "liquidchrome",
  "type": "registry:block",
  "title": "LiquidChrome",
  "description": "LiquidChrome background component",
  "dependencies": [
    "svogl"
  ],
  "files": [
    {
      "path": "src/lib/backgrounds/LiquidChrome/LiquidChrome.svelte",
      "content": "<script lang=\"ts\">\n\timport { Canvas, OglContext, Program, Mesh, Triangle } from 'svogl';\n\n\tinterface LiquidChromeProps {\n\t\tbaseColor?: [number, number, number];\n\t\tspeed?: number;\n\t\tamplitude?: number;\n\t\tfrequencyX?: number;\n\t\tfrequencyY?: number;\n\t\tinteractive?: boolean;\n\t\tclassName?: string;\n\t}\n\n\tlet {\n\t\tbaseColor = [0.1, 0.1, 0.1],\n\t\tspeed = 0.2,\n\t\tamplitude = 0.5,\n\t\tfrequencyX = 3,\n\t\tfrequencyY = 2,\n\t\tinteractive = true,\n\t\tclassName = ''\n\t}: LiquidChromeProps = $props();\n\n\tlet ogl = $state<OglContext | null>(null);\n\tlet mousePos = $state([0, 0]);\n\n\t// Mouse interaction handler\n\tconst handleMouseMove = ({ x, y }: { x: number; y: number }) => {\n\t\tif (interactive) {\n\t\t\tmousePos = [x, 1 - y]; // Flip Y coordinate like original\n\t\t}\n\t};\n\n\tconst vertex = `\n      attribute vec2 position;\n      attribute vec2 uv;\n      varying vec2 vUv;\n      void main() {\n        vUv = uv;\n        gl_Position = vec4(position, 0.0, 1.0);\n      }\n    `;\n\n\tconst fragment = `\n      precision highp float;\n      uniform float uTime;\n      uniform vec3 uResolution;\n      uniform vec3 uBaseColor;\n      uniform float uAmplitude;\n      uniform float uFrequencyX;\n      uniform float uFrequencyY;\n      uniform vec2 uMouse;\n      varying vec2 vUv;\n\n      vec4 renderImage(vec2 uvCoord) {\n          vec2 fragCoord = uvCoord * uResolution.xy;\n          vec2 uv = (2.0 * fragCoord - uResolution.xy) / min(uResolution.x, uResolution.y);\n\n          for (float i = 1.0; i < 10.0; i++){\n              uv.x += uAmplitude / i * cos(i * uFrequencyX * uv.y + uTime + uMouse.x * 3.14159);\n              uv.y += uAmplitude / i * cos(i * uFrequencyY * uv.x + uTime + uMouse.y * 3.14159);\n          }\n\n          vec2 diff = (uvCoord - uMouse);\n          float dist = length(diff);\n          float falloff = exp(-dist * 20.0);\n          float ripple = sin(10.0 * dist - uTime * 2.0) * 0.03;\n          uv += (diff / (dist + 0.0001)) * ripple * falloff;\n\n          vec3 color = uBaseColor / abs(sin(uTime - uv.y - uv.x));\n          return vec4(color, 1.0);\n      }\n\n      void main() {\n          vec4 col = vec4(0.0);\n          int samples = 0;\n          for (int i = -1; i <= 1; i++){\n              for (int j = -1; j <= 1; j++){\n                  vec2 offset = vec2(float(i), float(j)) * (1.0 / min(uResolution.x, uResolution.y));\n                  col += renderImage(vUv + offset);\n                  samples++;\n              }\n          }\n          gl_FragColor = col / float(samples);\n      }\n    `;\n</script>\n\n<Canvas\n\tbind:ogl\n\tonMouseMove={handleMouseMove}\n\tclass={className}\n\tantialias={true}\n\tonMount={({ gl }) => {\n\t\tgl?.clearColor(1, 1, 1, 1);\n\t}}\n>\n\t<Program\n\t\t{vertex}\n\t\t{fragment}\n\t\tuniforms={{\n\t\t\tuTime: { value: 0 },\n\t\t\tuResolution: { value: [1, 1, 1], noUpdate: true },\n\t\t\tuBaseColor: { value: baseColor },\n\t\t\tuAmplitude: { value: amplitude },\n\t\t\tuFrequencyX: { value: frequencyX },\n\t\t\tuFrequencyY: { value: frequencyY },\n\t\t\tuMouse: { value: mousePos }\n\t\t}}\n\t\tonResize={({ width, height }, program) => {\n\t\t\tprogram.program.uniforms.uResolution.value = [width, height, width / height];\n\t\t}}\n\t\tonUpdate={({ time }, { program }) => {\n\t\t\t// Update uniforms with current prop values for reactivity\n\t\t\tprogram.uniforms.uTime.value = time * 0.001 * speed;\n\t\t}}\n\t>\n\t\t<Triangle>\n\t\t\t<Mesh\n\t\t\t\tonUpdate={({ time }, mesh) => {\n\t\t\t\t\tmesh.ogl.renderer?.render({ scene: mesh.mesh });\n\t\t\t\t}}\n\t\t\t/>\n\t\t</Triangle>\n\t</Program>\n</Canvas>\n",
      "type": "registry:component"
    }
  ]
}