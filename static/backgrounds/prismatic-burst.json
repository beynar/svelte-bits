{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "prismatic-burst",
  "type": "registry:block",
  "title": "Prismatic Burst",
  "description": "Prismatic burst background component with ray marching effects",
  "dependencies": [
    "svogl"
  ],
  "files": [
    {
      "path": "src/lib/backgrounds/PrismaticBurst/PrismaticBurst.svelte",
      "content": "<script lang=\"ts\">\n\timport { Canvas, Program, Mesh, Triangle, Texture } from 'svogl';\n\n\ttype Offset = { x?: number | string; y?: number | string };\n\ttype AnimationType = 'rotate' | 'rotate3d' | 'hover';\n\n\tinterface Props {\n\t\tintensity?: number;\n\t\tspeed?: number;\n\t\tanimationType?: AnimationType;\n\t\tcolors?: string[];\n\t\tdistort?: number;\n\t\tpaused?: boolean;\n\t\toffset?: Offset;\n\t\thoverDampness?: number;\n\t\trayCount?: number;\n\t\tmixBlendMode?: string;\n\t\tclass?: string;\n\t}\n\n\tlet {\n\t\tintensity = 2,\n\t\tspeed = 0.5,\n\t\tanimationType = 'rotate3d',\n\t\tcolors,\n\t\tdistort = 0,\n\t\tpaused = false,\n\t\toffset = { x: 0, y: 0 },\n\t\thoverDampness = 0,\n\t\trayCount,\n\t\tmixBlendMode = 'lighten',\n\t\tclass: className = ''\n\t}: Props = $props();\n\n\t// Utility functions\n\tconst hexToRgb01 = (hex: string): [number, number, number] => {\n\t\tlet h = hex.trim();\n\t\tif (h.startsWith('#')) h = h.slice(1);\n\t\tif (h.length === 3) {\n\t\t\tconst r = h[0],\n\t\t\t\tg = h[1],\n\t\t\t\tb = h[2];\n\t\t\th = r + r + g + g + b + b;\n\t\t}\n\t\tconst intVal = parseInt(h, 16);\n\t\tif (isNaN(intVal) || (h.length !== 6 && h.length !== 8)) return [1, 1, 1];\n\t\tconst r = ((intVal >> 16) & 255) / 255;\n\t\tconst g = ((intVal >> 8) & 255) / 255;\n\t\tconst b = (intVal & 255) / 255;\n\t\treturn [r, g, b];\n\t};\n\n\tconst toPx = (v: number | string | undefined): number => {\n\t\tif (v == null) return 0;\n\t\tif (typeof v === 'number') return v;\n\t\tconst s = String(v).trim();\n\t\tconst num = parseFloat(s.replace('px', ''));\n\t\treturn isNaN(num) ? 0 : num;\n\t};\n\n\t// Animation state\n\tlet mouseTarget = [0.5, 0.5];\n\tlet mouseSmooth = [0.5, 0.5];\n\tlet accumTime = 0;\n\tlet lastTime = 0;\n\tlet gradientTexture: Texture | null = null;\n\n\t// Animation type mapping\n\tconst animTypeMap: Record<AnimationType, number> = {\n\t\trotate: 0,\n\t\trotate3d: 1,\n\t\thover: 2\n\t};\n\n\tconst vertex = `\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUv;\nvoid main() {\n    vUv = uv;\n    gl_Position = vec4(position, 0.0, 1.0);\n}\n`;\n\n\tconst fragment = `\nprecision highp float;\nprecision highp int;\n\nuniform vec2  uResolution;\nuniform float uTime;\n\nuniform float uIntensity;\nuniform float uSpeed;\nuniform int   uAnimType;\nuniform vec2  uMouse;\nuniform int   uColorCount;\nuniform float uDistort;\nuniform vec2  uOffset;\nuniform sampler2D uGradient;\nuniform float uNoiseAmount;\nuniform int   uRayCount;\n\nvarying vec2 vUv;\n\nfloat hash21(vec2 p){\n    p = floor(p);\n    float f = 52.9829189 * fract(dot(p, vec2(0.065, 0.005)));\n    return fract(f);\n}\n\nmat2 rot30(){ return mat2(0.8, -0.5, 0.5, 0.8); }\n\nfloat layeredNoise(vec2 fragPx){\n    vec2 p = mod(fragPx + vec2(uTime * 30.0, -uTime * 21.0), 1024.0);\n    vec2 q = rot30() * p;\n    float n = 0.0;\n    n += 0.40 * hash21(q);\n    n += 0.25 * hash21(q * 2.0 + 17.0);\n    n += 0.20 * hash21(q * 4.0 + 47.0);\n    n += 0.10 * hash21(q * 8.0 + 113.0);\n    n += 0.05 * hash21(q * 16.0 + 191.0);\n    return n;\n}\n\nvec3 rayDir(vec2 frag, vec2 res, vec2 offset, float dist){\n    float focal = res.y * max(dist, 1e-3);\n    return normalize(vec3(2.0 * (frag - offset) - res, focal));\n}\n\nfloat edgeFade(vec2 frag, vec2 res, vec2 offset){\n    vec2 toC = frag - 0.5 * res - offset;\n    float r = length(toC) / (0.5 * min(res.x, res.y));\n    float x = clamp(r, 0.0, 1.0);\n    float q = x * x * x * (x * (x * 6.0 - 15.0) + 10.0);\n    float s = q * 0.5;\n    s = pow(s, 1.5);\n    float tail = 1.0 - pow(1.0 - s, 2.0);\n    s = mix(s, tail, 0.2);\n    float dn = (layeredNoise(frag * 0.15) - 0.5) * 0.0015 * s;\n    return clamp(s + dn, 0.0, 1.0);\n}\n\nmat3 rotX(float a){ float c = cos(a), s = sin(a); return mat3(1.0,0.0,0.0, 0.0,c,-s, 0.0,s,c); }\nmat3 rotY(float a){ float c = cos(a), s = sin(a); return mat3(c,0.0,s, 0.0,1.0,0.0, -s,0.0,c); }\nmat3 rotZ(float a){ float c = cos(a), s = sin(a); return mat3(c,-s,0.0, s,c,0.0, 0.0,0.0,1.0); }\n\nvec3 sampleGradient(float t){\n    t = clamp(t, 0.0, 1.0);\n    return texture2D(uGradient, vec2(t, 0.5)).rgb;\n}\n\nvec2 rot2(vec2 v, float a){\n    float s = sin(a), c = cos(a);\n    return mat2(c, -s, s, c) * v;\n}\n\nfloat bendAngle(vec3 q, float t){\n    float a = 0.8 * sin(q.x * 0.55 + t * 0.6)\n            + 0.7 * sin(q.y * 0.50 - t * 0.5)\n            + 0.6 * sin(q.z * 0.60 + t * 0.7);\n    return a;\n}\n\nvoid main(){\n    vec2 frag = gl_FragCoord.xy;\n    float t = uTime * uSpeed;\n    float jitterAmp = 0.1 * clamp(uNoiseAmount, 0.0, 1.0);\n    vec3 dir = rayDir(frag, uResolution, uOffset, 1.0);\n    float marchT = 0.0;\n    vec3 col = vec3(0.0);\n    float n = layeredNoise(frag);\n    vec4 c = cos(t * 0.2 + vec4(0.0, 33.0, 11.0, 0.0));\n    mat2 M2 = mat2(c.x, c.y, c.z, c.w);\n    float amp = clamp(uDistort, 0.0, 50.0) * 0.15;\n\n    mat3 rot3dMat = mat3(1.0);\n    if(uAnimType == 1){\n      vec3 ang = vec3(t * 0.31, t * 0.21, t * 0.17);\n      rot3dMat = rotZ(ang.z) * rotY(ang.y) * rotX(ang.x);\n    }\n    mat3 hoverMat = mat3(1.0);\n    if(uAnimType == 2){\n      vec2 m = uMouse * 2.0 - 1.0;\n      vec3 ang = vec3(m.y * 0.6, m.x * 0.6, 0.0);\n      hoverMat = rotY(ang.y) * rotX(ang.x);\n    }\n\n    for (int i = 0; i < 44; ++i) {\n        vec3 P = marchT * dir;\n        P.z -= 2.0;\n        float rad = length(P);\n        vec3 Pl = P * (10.0 / max(rad, 1e-6));\n\n        if(uAnimType == 0){\n            Pl.xz *= M2;\n        } else if(uAnimType == 1){\n      Pl = rot3dMat * Pl;\n        } else {\n      Pl = hoverMat * Pl;\n        }\n\n        float stepLen = min(rad - 0.3, n * jitterAmp) + 0.1;\n\n        float grow = smoothstep(0.35, 3.0, marchT);\n        float a1 = amp * grow * bendAngle(Pl * 0.6, t);\n        float a2 = 0.5 * amp * grow * bendAngle(Pl.zyx * 0.5 + 3.1, t * 0.9);\n        vec3 Pb = Pl;\n        Pb.xz = rot2(Pb.xz, a1);\n        Pb.xy = rot2(Pb.xy, a2);\n\n        float rayPattern = smoothstep(\n            0.5, 0.7,\n            sin(Pb.x + cos(Pb.y) * cos(Pb.z)) *\n            sin(Pb.z + sin(Pb.y) * cos(Pb.x + t))\n        );\n\n        if (uRayCount > 0) {\n            float ang = atan(Pb.y, Pb.x);\n            float comb = 0.5 + 0.5 * cos(float(uRayCount) * ang);\n            comb = pow(comb, 3.0);\n            rayPattern *= smoothstep(0.15, 0.95, comb);\n        }\n\n        vec3 spectralDefault = 1.0 + vec3(\n            cos(marchT * 3.0 + 0.0),\n            cos(marchT * 3.0 + 1.0),\n            cos(marchT * 3.0 + 2.0)\n        );\n\n        float saw = fract(marchT * 0.25);\n        float tRay = saw * saw * (3.0 - 2.0 * saw);\n        vec3 userGradient = 2.0 * sampleGradient(tRay);\n        vec3 spectral = (uColorCount > 0) ? userGradient : spectralDefault;\n        vec3 base = (0.05 / (0.4 + stepLen))\n                  * smoothstep(5.0, 0.0, rad)\n                  * spectral;\n\n        col += base * rayPattern;\n        marchT += stepLen;\n    }\n\n    col *= edgeFade(frag, uResolution, uOffset);\n    col *= uIntensity;\n\n    gl_FragColor = vec4(clamp(col, 0.0, 1.0), 1.0);\n}\n`;\n\n\t// Create gradient texture from colors\n\tfunction createGradientTexture(gl: WebGLRenderingContext, colors?: string[]): Texture {\n\t\tif (!colors || colors.length === 0) {\n\t\t\t// Default white texture\n\t\t\tconst white = new Uint8Array([255, 255, 255, 255]);\n\t\t\treturn new Texture(gl, {\n\t\t\t\timage: white,\n\t\t\t\twidth: 1,\n\t\t\t\theight: 1,\n\t\t\t\tgenerateMipmaps: false,\n\t\t\t\tflipY: false\n\t\t\t});\n\t\t}\n\n\t\tconst capped = colors.slice(0, 64);\n\t\tconst count = capped.length;\n\t\tconst data = new Uint8Array(count * 4);\n\t\t\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\tconst [r, g, b] = hexToRgb01(capped[i]);\n\t\t\tdata[i * 4 + 0] = Math.round(r * 255);\n\t\t\tdata[i * 4 + 1] = Math.round(g * 255);\n\t\t\tdata[i * 4 + 2] = Math.round(b * 255);\n\t\t\tdata[i * 4 + 3] = 255;\n\t\t}\n\n\t\tconst texture = new Texture(gl, {\n\t\t\timage: data,\n\t\t\twidth: count,\n\t\t\theight: 1,\n\t\t\tgenerateMipmaps: false,\n\t\t\tflipY: false\n\t\t});\n\n\t\ttexture.minFilter = gl.LINEAR;\n\t\ttexture.magFilter = gl.LINEAR;\n\t\ttexture.wrapS = gl.CLAMP_TO_EDGE;\n\t\ttexture.wrapT = gl.CLAMP_TO_EDGE;\n\n\t\treturn texture;\n\t}\n\n\t// Computed values\n\tconst offsetX = $derived(toPx(offset?.x));\n\tconst offsetY = $derived(toPx(offset?.y));\n\tconst colorCount = $derived(Array.isArray(colors) ? colors.length : 0);\n\tconst rayCountValue = $derived(Math.max(0, Math.floor(rayCount ?? 0)));\n</script>\n\n<Canvas\n\tclass={className}\n\tstyle={mixBlendMode && mixBlendMode !== 'none' ? `mix-blend-mode: ${mixBlendMode}` : ''}\n\tonMouseMove={({ e, rect }) => {\n\t\tif (animationType === 'hover') {\n\t\t\tconst x = (e.clientX - rect.left) / Math.max(rect.width, 1);\n\t\t\tconst y = (e.clientY - rect.top) / Math.max(rect.height, 1);\n\t\t\tmouseTarget = [Math.min(Math.max(x, 0), 1), Math.min(Math.max(y, 0), 1)];\n\t\t}\n\t}}\n>\n\t{#snippet children(ogl)}\n\t\t<Program\n\t\t\t{vertex}\n\t\t\t{fragment}\n\t\t\tuniforms={{\n\t\t\t\tuResolution: { value: [ogl.containerSize[0], ogl.containerSize[1]] },\n\t\t\t\tuTime: { value: 0 },\n\t\t\t\tuIntensity: { value: intensity },\n\t\t\t\tuSpeed: { value: speed },\n\t\t\t\tuAnimType: { value: animTypeMap[animationType] },\n\t\t\t\tuMouse: { value: mouseSmooth },\n\t\t\t\tuColorCount: { value: colorCount },\n\t\t\t\tuDistort: { value: distort },\n\t\t\t\tuOffset: { value: [offsetX, offsetY] },\n\t\t\t\tuGradient: { value: gradientTexture },\n\t\t\t\tuNoiseAmount: { value: 0.8 },\n\t\t\t\tuRayCount: { value: rayCountValue }\n\t\t\t}}\n\t\t\tonResize={({ width, height }, program) => {\n\t\t\t\tprogram.program.uniforms.uResolution.value = [width, height];\n\t\t\t}}\n\t\t\tonUpdate={({ time }, program) => {\n\t\t\t\tconst currentTime = time * 0.001;\n\t\t\t\tconst dt = lastTime > 0 ? currentTime - lastTime : 0;\n\t\t\t\tlastTime = currentTime;\n\n\t\t\t\tif (!paused) {\n\t\t\t\t\taccumTime += dt;\n\t\t\t\t}\n\n\t\t\t\t// Smooth mouse interpolation for hover mode\n\t\t\t\tif (animationType === 'hover') {\n\t\t\t\t\tconst tau = 0.02 + Math.max(0, Math.min(1, hoverDampness)) * 0.5;\n\t\t\t\t\tconst alpha = dt > 0 ? 1 - Math.exp(-dt / tau) : 0;\n\t\t\t\t\tmouseSmooth[0] += (mouseTarget[0] - mouseSmooth[0]) * alpha;\n\t\t\t\t\tmouseSmooth[1] += (mouseTarget[1] - mouseSmooth[1]) * alpha;\n\t\t\t\t}\n\n\t\t\t\t// Update uniforms\n\t\t\t\tprogram.program.uniforms.uTime.value = accumTime;\n\t\t\t\tprogram.program.uniforms.uMouse.value = mouseSmooth;\n\t\t\t\tprogram.program.uniforms.uIntensity.value = intensity;\n\t\t\t\tprogram.program.uniforms.uSpeed.value = speed;\n\t\t\t\tprogram.program.uniforms.uAnimType.value = animTypeMap[animationType];\n\t\t\t\tprogram.program.uniforms.uColorCount.value = colorCount;\n\t\t\t\tprogram.program.uniforms.uDistort.value = distort;\n\t\t\t\tprogram.program.uniforms.uOffset.value = [offsetX, offsetY];\n\t\t\t\tprogram.program.uniforms.uRayCount.value = rayCountValue;\n\n\t\t\t\t// Update gradient texture if colors changed\n\t\t\t\tif (!gradientTexture || (colors && colors.length !== colorCount)) {\n\t\t\t\t\tgradientTexture = createGradientTexture(ogl.gl, colors);\n\t\t\t\t\tprogram.program.uniforms.uGradient.value = gradientTexture;\n\t\t\t\t}\n\t\t\t}}\n\t\t>\n\t\t\t<Triangle>\n\t\t\t\t<Mesh\n\t\t\t\t\tonUpdate={({ time }, mesh) => {\n\t\t\t\t\t\tmesh.ogl.renderer?.render({ scene: mesh.mesh });\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Triangle>\n\t\t</Program>\n\t{/snippet}\n</Canvas>\n",
      "type": "registry:component"
    }
  ]
}
