{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "plasma",
  "type": "registry:block",
  "title": "Plasma",
  "description": "Plasma background component",
  "dependencies": [
    "svogl"
  ],
  "files": [
    {
      "path": "src/lib/backgrounds/Plasma/Plasma.svelte",
      "content": "<script lang=\"ts\">\n\timport { Canvas, OglContext, Program, Mesh, Triangle } from 'svogl';\n\n\tinterface PlasmaProps {\n\t\tcolor?: string;\n\t\tspeed?: number;\n\t\tdirection?: 'forward' | 'reverse' | 'pingpong';\n\t\tscale?: number;\n\t\topacity?: number;\n\t\tmouseInteractive?: boolean;\n\t\tclass: string;\n\t}\n\n\tlet {\n\t\tcolor = '#ffffff',\n\t\tspeed = 1,\n\t\tdirection = 'forward',\n\t\tscale = 1,\n\t\topacity = 1,\n\t\tmouseInteractive = true,\n\t\tclass: className = ''\n\t}: PlasmaProps = $props();\n\n\tconst hexToRgb = (hex: string): [number, number, number] => {\n\t\tconst result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n\t\tif (!result) return [1, 0.5, 0.2];\n\t\treturn [\n\t\t\tparseInt(result[1], 16) / 255,\n\t\t\tparseInt(result[2], 16) / 255,\n\t\t\tparseInt(result[3], 16) / 255\n\t\t];\n\t};\n\n\tconst vertex = `#version 300 es\nprecision highp float;\nin vec2 position;\nin vec2 uv;\nout vec2 vUv;\nvoid main() {\n  vUv = uv;\n  gl_Position = vec4(position, 0.0, 1.0);\n}\n`;\n\n\tconst fragment = `#version 300 es\nprecision highp float;\nuniform vec2 iResolution;\nuniform float iTime;\nuniform vec3 uCustomColor;\nuniform float uUseCustomColor;\nuniform float uSpeed;\nuniform float uDirection;\nuniform float uScale;\nuniform float uOpacity;\nuniform vec2 uMouse;\nuniform float uMouseInteractive;\nout vec4 fragColor;\n\nvoid mainImage(out vec4 o, vec2 C) {\n  vec2 center = iResolution.xy * 0.5;\n  C = (C - center) / uScale + center;\n  \n  vec2 mouseOffset = (uMouse - center) * 0.0002;\n  C += mouseOffset * length(C - center) * step(0.5, uMouseInteractive);\n  \n  float i, d, z, T = iTime * uSpeed * uDirection;\n  vec3 O, p, S;\n\n  for (vec2 r = iResolution.xy, Q; ++i < 60.; O += o.w/d*o.xyz) {\n    p = z*normalize(vec3(C-.5*r,r.y)); \n    p.z -= 4.; \n    S = p;\n    d = p.y-T;\n    \n    p.x += .4*(1.+p.y)*sin(d + p.x*0.1)*cos(.34*d + p.x*0.05); \n    Q = p.xz *= mat2(cos(p.y+vec4(0,11,33,0)-T)); \n    z+= d = abs(sqrt(length(Q*Q)) - .25*(5.+S.y))/3.+8e-4; \n    o = 1.+sin(S.y+p.z*.5+S.z-length(S-p)+vec4(2,1,0,8));\n  }\n  \n  o.xyz = tanh(O/1e4);\n}\n\nbool finite1(float x){ return !(isnan(x) || isinf(x)); }\nvec3 sanitize(vec3 c){\n  return vec3(\n    finite1(c.r) ? c.r : 0.0,\n    finite1(c.g) ? c.g : 0.0,\n    finite1(c.b) ? c.b : 0.0\n  );\n}\n\nvoid main() {\n  vec4 o = vec4(0.0);\n  mainImage(o, gl_FragCoord.xy);\n  vec3 rgb = sanitize(o.rgb);\n  \n  float intensity = (rgb.r + rgb.g + rgb.b) / 3.0;\n  vec3 customColor = intensity * uCustomColor;\n  vec3 finalColor = mix(rgb, customColor, step(0.5, uUseCustomColor));\n  \n  float alpha = length(rgb) * uOpacity;\n  fragColor = vec4(finalColor, alpha);\n}`;\n\n\tlet ogl: OglContext | null = null;\n\tlet mousePos = { x: 0, y: 0 };\n\tlet t0 = performance.now();\n\n\t// Mouse interaction handlers\n\tconst handleMouseMove = ({ x, y }: { x: number; y: number }) => {\n\t\tif (!mouseInteractive || !ogl?.container) return;\n\t\tconst rect = ogl.container.getBoundingClientRect();\n\t\tmousePos.x = x * rect.width;\n\t\tmousePos.y = y * rect.height;\n\t};\n</script>\n\n<Canvas\n\tbind:ogl\n\tclass={className}\n\talpha={true}\n\tantialias={false}\n\tdpr={typeof window !== 'undefined' ? Math.min(window.devicePixelRatio, 2) : 1}\n\tonMouseMove={handleMouseMove}\n>\n\t{#snippet children(ogl)}\n\t\t{#if ogl.container}\n\t\t\t<Program\n\t\t\t\tonResize={({ width, height }, program) => {\n\t\t\t\t\tconst gl = ogl.gl;\n\t\t\t\t\tconst res = program.program.uniforms.iResolution.value as Float32Array;\n\t\t\t\t\tres[0] = gl.drawingBufferWidth;\n\t\t\t\t\tres[1] = gl.drawingBufferHeight;\n\t\t\t\t}}\n\t\t\t\tonMount={({ program }) => {\n\t\t\t\t\tconst gl = ogl.gl;\n\t\t\t\t\tconst res = program.uniforms.iResolution.value as Float32Array;\n\t\t\t\t\tres[0] = gl.drawingBufferWidth;\n\t\t\t\t\tres[1] = gl.drawingBufferHeight;\n\t\t\t\t}}\n\t\t\t\t{vertex}\n\t\t\t\t{fragment}\n\t\t\t\tuniforms={{\n\t\t\t\t\tiTime: { value: 0 },\n\t\t\t\t\tiResolution: { value: new Float32Array([1, 1]), noUpdate: true },\n\t\t\t\t\tuCustomColor: { value: new Float32Array(hexToRgb(color)) },\n\t\t\t\t\tuUseCustomColor: { value: color ? 1.0 : 0.0 },\n\t\t\t\t\tuSpeed: { value: speed * 0.4 },\n\t\t\t\t\tuDirection: { value: direction === 'reverse' ? -1.0 : 1.0 },\n\t\t\t\t\tuScale: { value: scale },\n\t\t\t\t\tuOpacity: { value: opacity },\n\t\t\t\t\tuMouse: { value: [mousePos.x, mousePos.y] },\n\t\t\t\t\tuMouseInteractive: { value: mouseInteractive ? 1.0 : 0.0 }\n\t\t\t\t}}\n\t\t\t\tonUpdate={({ time }, program) => {\n\t\t\t\t\tlet timeValue = (time - t0) * 0.001;\n\t\t\t\t\tprogram.program.uniforms.uMouse.value = [mousePos.x, mousePos.y];\n\t\t\t\t\tif (direction === 'pingpong') {\n\t\t\t\t\t\tconst cycle = Math.sin(timeValue * 0.5) * 1.0;\n\t\t\t\t\t\tprogram.program.uniforms.uDirection.value = cycle;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst currentDirectionMultiplier = direction === 'reverse' ? -1.0 : 1.0;\n\t\t\t\t\t\tprogram.program.uniforms.uDirection.value = currentDirectionMultiplier;\n\t\t\t\t\t}\n\n\t\t\t\t\tprogram.program.uniforms.iTime.value = timeValue;\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Triangle>\n\t\t\t\t\t<Mesh\n\t\t\t\t\t\tonUpdate={({ time }, mesh) => {\n\t\t\t\t\t\t\tmesh.ogl.renderer?.render({ scene: mesh.mesh });\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</Triangle>\n\t\t\t</Program>\n\t\t{/if}\n\t{/snippet}\n</Canvas>\n",
      "type": "registry:component"
    }
  ]
}