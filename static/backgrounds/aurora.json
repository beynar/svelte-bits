{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "aurora",
  "type": "registry:block",
  "title": "Aurora",
  "description": "Aurora background component",
  "dependencies": [
    "svogl"
  ],
  "files": [
    {
      "path": "src/lib/backgrounds/Aurora/Aurora.svelte",
      "content": "<script lang=\"ts\">\n\timport { Canvas, Program, Mesh, Triangle, OglContext } from 'svogl';\n\n\tinterface AuroraProps {\n\t\tcolor1?: string;\n\t\tcolor2?: string;\n\t\tcolor3?: string;\n\t\tamplitude?: number;\n\t\tblend?: number;\n\t\ttime?: number;\n\t\tspeed?: number;\n\t\tclass: string;\n\t}\n\n\tlet {\n\t\tcolor1 = '#5227FF',\n\t\tcolor2 = '#7cff67',\n\t\tcolor3 = '#5227FF',\n\t\tamplitude = 1.0,\n\t\tblend = 0.5,\n\t\ttime,\n\t\tspeed = 1.0,\n\t\tclass: className = ''\n\t}: AuroraProps = $props();\n\n\tconst vertex = `#version 300 es\nin vec2 position;\nvoid main() {\n  gl_Position = vec4(position, 0.0, 1.0);\n}\n`;\n\n\tconst fragment = `#version 300 es\nprecision highp float;\n\nuniform float uTime;\nuniform float uAmplitude;\nuniform vec3 uColorStops[3];\nuniform vec2 uResolution;\nuniform float uBlend;\n\nout vec4 fragColor;\n\nvec3 permute(vec3 x) {\n  return mod(((x * 34.0) + 1.0) * x, 289.0);\n}\n\nfloat snoise(vec2 v){\n  const vec4 C = vec4(\n      0.211324865405187, 0.366025403784439,\n      -0.577350269189626, 0.024390243902439\n  );\n  vec2 i  = floor(v + dot(v, C.yy));\n  vec2 x0 = v - i + dot(i, C.xx);\n  vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n  vec4 x12 = x0.xyxy + C.xxzz;\n  x12.xy -= i1;\n  i = mod(i, 289.0);\n\n  vec3 p = permute(\n      permute(i.y + vec3(0.0, i1.y, 1.0))\n    + i.x + vec3(0.0, i1.x, 1.0)\n  );\n\n  vec3 m = max(\n      0.5 - vec3(\n          dot(x0, x0),\n          dot(x12.xy, x12.xy),\n          dot(x12.zw, x12.zw)\n      ), \n      0.0\n  );\n  m = m * m;\n  m = m * m;\n\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\n  vec3 h = abs(x) - 0.5;\n  vec3 ox = floor(x + 0.5);\n  vec3 a0 = x - ox;\n  m *= 1.79284291400159 - 0.85373472095314 * (a0*a0 + h*h);\n\n  vec3 g;\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n  return 130.0 * dot(m, g);\n}\n\nstruct ColorStop {\n  vec3 color;\n  float position;\n};\n\n#define COLOR_RAMP(colors, factor, finalColor) {              \\\n  int index = 0;                                            \\\n  for (int i = 0; i < 2; i++) {                               \\\n     ColorStop currentColor = colors[i];                    \\\n     bool isInBetween = currentColor.position <= factor;    \\\n     index = int(mix(float(index), float(i), float(isInBetween))); \\\n  }                                                         \\\n  ColorStop currentColor = colors[index];                   \\\n  ColorStop nextColor = colors[index + 1];                  \\\n  float range = nextColor.position - currentColor.position; \\\n  float lerpFactor = (factor - currentColor.position) / range; \\\n  finalColor = mix(currentColor.color, nextColor.color, lerpFactor); \\\n}\n\nvoid main() {\n  vec2 uv = gl_FragCoord.xy / uResolution;\n  \n  ColorStop colors[3];\n  colors[0] = ColorStop(uColorStops[0], 0.0);\n  colors[1] = ColorStop(uColorStops[1], 0.5);\n  colors[2] = ColorStop(uColorStops[2], 1.0);\n  \n  vec3 rampColor;\n  COLOR_RAMP(colors, uv.x, rampColor);\n  \n  float height = snoise(vec2(uv.x * 2.0 + uTime * 0.1, uTime * 0.25)) * 0.5 * uAmplitude;\n  height = exp(height);\n  height = (uv.y * 2.0 - height + 0.2);\n  float intensity = 0.6 * height;\n  \n  float midPoint = 0.20;\n  float auroraAlpha = smoothstep(midPoint - uBlend * 0.5, midPoint + uBlend * 0.5, intensity);\n  \n  vec3 auroraColor = intensity * rampColor;\n  \n  fragColor = vec4(auroraColor * auroraAlpha, auroraAlpha);\n}\n`;\n\tlet startTime = 0;\n</script>\n\n<Canvas\n\tonMount={(ogl) => {\n\t\tconst gl = ogl.gl;\n\t\tgl.clearColor(0, 0, 0, 0);\n\t\tgl.enable(gl.BLEND);\n\t\tgl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n\t}}\n\tclass={className}\n\talpha={true}\n\tpremultipliedAlpha={true}\n\tantialias={true}\n>\n\t{#snippet children(ogl)}\n\t\t{@const colorStopsArray = [color1, color2, color3].map((hex) => {\n\t\t\tif (!ogl) return [0, 0, 0];\n\t\t\treturn ogl.color.hexToArray(hex);\n\t\t})}\n\n\t\t<Program\n\t\t\tonResize={({ width, height }, program) => {\n\t\t\t\tprogram.program.uniforms.uResolution.value = [width, height];\n\t\t\t}}\n\t\t\t{vertex}\n\t\t\t{fragment}\n\t\t\tuniforms={{\n\t\t\t\tuTime: { value: 0 },\n\t\t\t\tuResolution: { value: [ogl.container.offsetWidth, ogl.container.offsetHeight] },\n\t\t\t\tuAmplitude: { value: amplitude },\n\t\t\t\tuColorStops: { value: colorStopsArray },\n\t\t\t\tuBlend: { value: blend }\n\t\t\t}}\n\t\t\tonMount={() => {\n\t\t\t\tstartTime = performance.now();\n\t\t\t}}\n\t\t\tonUpdate={({ time: t }, program) => {\n\t\t\t\tconst currentTime = time !== undefined ? time : t * 0.01;\n\t\t\t\tprogram.program.uniforms.uTime.value = currentTime * speed * 0.1;\n\t\t\t}}\n\t\t>\n\t\t\t<Triangle\n\t\t\t\tonMount={(triangle) => {\n\t\t\t\t\tif (triangle.triangle.attributes.uv) {\n\t\t\t\t\t\tdelete (triangle.triangle.attributes as any).uv;\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Mesh\n\t\t\t\t\tonUpdate={({ time }, mesh) => {\n\t\t\t\t\t\tmesh.ogl.renderer?.render({ scene: mesh.mesh });\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Triangle>\n\t\t</Program>\n\t{/snippet}\n</Canvas>\n",
      "type": "registry:component"
    }
  ]
}