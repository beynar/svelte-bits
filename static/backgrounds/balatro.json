{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "balatro",
  "type": "registry:block",
  "title": "Balatro",
  "description": "Balatro background component",
  "dependencies": [
    "svogl"
  ],
  "files": [
    {
      "path": "src/lib/backgrounds/Balatro/Balatro.svelte",
      "content": "<script lang=\"ts\">\n\timport { Canvas, type OglContext, Program, Mesh, Triangle } from 'svogl';\n\n\tinterface BalatroProps {\n\t\tspinRotation?: number;\n\t\tspinSpeed?: number;\n\t\toffset?: [number, number];\n\t\tcolor1?: string;\n\t\tcolor2?: string;\n\t\tcolor3?: string;\n\t\tcontrast?: number;\n\t\tlighting?: number;\n\t\tspinAmount?: number;\n\t\tpixelFilter?: number;\n\t\tspinEase?: number;\n\t\tisRotate?: boolean;\n\t\tmouseInteraction?: boolean;\n\t\tclass: string;\n\t}\n\n\tlet {\n\t\tspinRotation = -2.0,\n\t\tspinSpeed = 7.0,\n\t\toffset = [0.0, 0.0],\n\t\tcolor1 = '#DE443B',\n\t\tcolor2 = '#006BB4',\n\t\tcolor3 = '#162325',\n\t\tcontrast = 3.5,\n\t\tlighting = 0.4,\n\t\tspinAmount = 0.25,\n\t\tpixelFilter = 745.0,\n\t\tspinEase = 1.0,\n\t\tisRotate = false,\n\t\tmouseInteraction = true,\n\t\tclass: className = ''\n\t}: BalatroProps = $props();\n\n\tfunction hexToVec4(hex: string): [number, number, number, number] {\n\t\tlet hexStr = hex.replace('#', '');\n\t\tlet r = 0,\n\t\t\tg = 0,\n\t\t\tb = 0,\n\t\t\ta = 1;\n\t\tif (hexStr.length === 6) {\n\t\t\tr = parseInt(hexStr.slice(0, 2), 16) / 255;\n\t\t\tg = parseInt(hexStr.slice(2, 4), 16) / 255;\n\t\t\tb = parseInt(hexStr.slice(4, 6), 16) / 255;\n\t\t} else if (hexStr.length === 8) {\n\t\t\tr = parseInt(hexStr.slice(0, 2), 16) / 255;\n\t\t\tg = parseInt(hexStr.slice(2, 4), 16) / 255;\n\t\t\tb = parseInt(hexStr.slice(4, 6), 16) / 255;\n\t\t\ta = parseInt(hexStr.slice(6, 8), 16) / 255;\n\t\t}\n\t\treturn [r, g, b, a];\n\t}\n\n\tconst vertex = `\nattribute vec2 uv;\nattribute vec2 position;\nvarying vec2 vUv;\nvoid main() {\n  vUv = uv;\n  gl_Position = vec4(position, 0, 1);\n}\n`;\n\n\tconst fragment = `\nprecision highp float;\n\n#define PI 3.14159265359\n\nuniform float iTime;\nuniform vec3 iResolution;\nuniform float uSpinRotation;\nuniform float uSpinSpeed;\nuniform vec2 uOffset;\nuniform vec4 uColor1;\nuniform vec4 uColor2;\nuniform vec4 uColor3;\nuniform float uContrast;\nuniform float uLighting;\nuniform float uSpinAmount;\nuniform float uPixelFilter;\nuniform float uSpinEase;\nuniform bool uIsRotate;\nuniform vec2 uMouse;\n\nvarying vec2 vUv;\n\nvec4 effect(vec2 screenSize, vec2 screen_coords) {\n    float pixel_size = length(screenSize.xy) / uPixelFilter;\n    vec2 uv = (floor(screen_coords.xy * (1.0 / pixel_size)) * pixel_size - 0.5 * screenSize.xy) / length(screenSize.xy) - uOffset;\n    float uv_len = length(uv);\n    \n    float speed = (uSpinRotation * uSpinEase * 0.2);\n    if(uIsRotate){\n       speed = iTime * speed;\n    }\n    speed += 302.2;\n    \n    float mouseInfluence = (uMouse.x * 2.0 - 1.0);\n    speed += mouseInfluence * 0.1;\n    \n    float new_pixel_angle = atan(uv.y, uv.x) + speed - uSpinEase * 20.0 * (uSpinAmount * uv_len + (1.0 - uSpinAmount));\n    vec2 mid = (screenSize.xy / length(screenSize.xy)) / 2.0;\n    uv = (vec2(uv_len * cos(new_pixel_angle) + mid.x, uv_len * sin(new_pixel_angle) + mid.y) - mid);\n    \n    uv *= 30.0;\n    float baseSpeed = iTime * uSpinSpeed;\n    speed = baseSpeed + mouseInfluence * 2.0;\n    \n    vec2 uv2 = vec2(uv.x + uv.y);\n    \n    for(int i = 0; i < 5; i++) {\n        uv2 += sin(max(uv.x, uv.y)) + uv;\n        uv += 0.5 * vec2(\n            cos(5.1123314 + 0.353 * uv2.y + speed * 0.131121),\n            sin(uv2.x - 0.113 * speed)\n        );\n        uv -= cos(uv.x + uv.y) - sin(uv.x * 0.711 - uv.y);\n    }\n    \n    float contrast_mod = (0.25 * uContrast + 0.5 * uSpinAmount + 1.2);\n    float paint_res = min(2.0, max(0.0, length(uv) * 0.035 * contrast_mod));\n    float c1p = max(0.0, 1.0 - contrast_mod * abs(1.0 - paint_res));\n    float c2p = max(0.0, 1.0 - contrast_mod * abs(paint_res));\n    float c3p = 1.0 - min(1.0, c1p + c2p);\n    float light = (uLighting - 0.2) * max(c1p * 5.0 - 4.0, 0.0) + uLighting * max(c2p * 5.0 - 4.0, 0.0);\n    \n    return (0.3 / uContrast) * uColor1 + (1.0 - 0.3 / uContrast) * (uColor1 * c1p + uColor2 * c2p + vec4(c3p * uColor3.rgb, c3p * uColor1.a)) + light;\n}\n\nvoid main() {\n    vec2 uv = vUv * iResolution.xy;\n    gl_FragColor = effect(iResolution.xy, uv);\n}\n`;\n\n\t// Convert hex colors to vec4 arrays using $derived\n\tconst color1Vec4 = $derived(hexToVec4(color1));\n\tconst color2Vec4 = $derived(hexToVec4(color2));\n\tconst color3Vec4 = $derived(hexToVec4(color3));\n</script>\n\n<Canvas class={className}>\n\t{#snippet children(ogl)}\n\t\t<Program\n\t\t\t{vertex}\n\t\t\t{fragment}\n\t\t\tuniforms={{\n\t\t\t\tiTime: { value: 0 },\n\t\t\t\tiResolution: {\n\t\t\t\t\tvalue: [\n\t\t\t\t\t\togl.containerSize[0],\n\t\t\t\t\t\togl.containerSize[1],\n\t\t\t\t\t\togl.containerSize[0] / ogl.containerSize[1]\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\tuSpinRotation: { value: spinRotation },\n\t\t\t\tuSpinSpeed: { value: spinSpeed },\n\t\t\t\tuOffset: { value: offset },\n\t\t\t\tuColor1: { value: color1Vec4 },\n\t\t\t\tuColor2: { value: color2Vec4 },\n\t\t\t\tuColor3: { value: color3Vec4 },\n\t\t\t\tuContrast: { value: contrast },\n\t\t\t\tuLighting: { value: lighting },\n\t\t\t\tuSpinAmount: { value: spinAmount },\n\t\t\t\tuPixelFilter: { value: pixelFilter },\n\t\t\t\tuSpinEase: { value: spinEase },\n\t\t\t\tuIsRotate: { value: isRotate },\n\t\t\t\tuMouse: { value: ogl.mousePosition }\n\t\t\t}}\n\t\t\tonUpdate={({ time }, program) => {\n\t\t\t\tprogram.program.uniforms.iTime.value = time * 0.001;\n\t\t\t}}\n\t\t>\n\t\t\t<Triangle>\n\t\t\t\t<Mesh\n\t\t\t\t\tonUpdate={({ time }, mesh) => {\n\t\t\t\t\t\tmesh.ogl.renderer?.render({ scene: mesh.mesh });\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Triangle>\n\t\t</Program>\n\t{/snippet}\n</Canvas>\n",
      "type": "registry:component"
    }
  ]
}