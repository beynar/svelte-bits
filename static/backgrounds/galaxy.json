{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "galaxy",
  "type": "registry:block",
  "title": "Galaxy",
  "description": "Galaxy background component",
  "dependencies": [
    "svogl"
  ],
  "files": [
    {
      "path": "src/lib/backgrounds/Galaxy/Galaxy.svelte",
      "content": "<script lang=\"ts\">\n\timport { Canvas, OglContext, Program, Mesh, Triangle } from 'svogl';\n\n\tinterface GalaxyProps {\n\t\tfocal?: [number, number];\n\t\trotation?: [number, number];\n\t\tstarSpeed?: number;\n\t\tdensity?: number;\n\t\thueShift?: number;\n\t\tdisableAnimation?: boolean;\n\t\tspeed?: number;\n\t\tmouseInteraction?: boolean;\n\t\tglowIntensity?: number;\n\t\tsaturation?: number;\n\t\tmouseRepulsion?: boolean;\n\t\ttwinkleIntensity?: number;\n\t\trotationSpeed?: number;\n\t\trepulsionStrength?: number;\n\t\tautoCenterRepulsion?: number;\n\t\ttransparent?: boolean;\n\t\tclass: string;\n\t}\n\n\tlet {\n\t\tfocal = [0.5, 0.5],\n\t\trotation = [1.0, 0.0],\n\t\tstarSpeed = 0.5,\n\t\tdensity = 1,\n\t\thueShift = 140,\n\t\tdisableAnimation = false,\n\t\tspeed = 1.0,\n\t\tmouseInteraction = true,\n\t\tglowIntensity = 0.3,\n\t\tsaturation = 0.0,\n\t\tmouseRepulsion = true,\n\t\trepulsionStrength = 2,\n\t\ttwinkleIntensity = 0.3,\n\t\trotationSpeed = 0.1,\n\t\tautoCenterRepulsion = 0,\n\t\ttransparent = false,\n\t\tclass: className = ''\n\t}: GalaxyProps = $props();\n\n\tconst vertex = `\nattribute vec2 uv;\nattribute vec2 position;\n\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = vec4(position, 0, 1);\n}\n`;\n\n\tconst fragment = `\nprecision highp float;\n\nuniform float uTime;\nuniform vec3 uResolution;\nuniform vec2 uFocal;\nuniform vec2 uRotation;\nuniform float uStarSpeed;\nuniform float uDensity;\nuniform float uHueShift;\nuniform float uSpeed;\nuniform vec2 uMouse;\nuniform float uGlowIntensity;\nuniform float uSaturation;\nuniform bool uMouseRepulsion;\nuniform float uTwinkleIntensity;\nuniform float uRotationSpeed;\nuniform float uRepulsionStrength;\nuniform float uMouseActiveFactor;\nuniform float uAutoCenterRepulsion;\nuniform bool uTransparent;\n\nvarying vec2 vUv;\n\n#define NUM_LAYER 4.0\n#define STAR_COLOR_CUTOFF 0.2\n#define MAT45 mat2(0.7071, -0.7071, 0.7071, 0.7071)\n#define PERIOD 3.0\n\nfloat Hash21(vec2 p) {\n  p = fract(p * vec2(123.34, 456.21));\n  p += dot(p, p + 45.32);\n  return fract(p.x * p.y);\n}\n\nfloat tri(float x) {\n  return abs(fract(x) * 2.0 - 1.0);\n}\n\nfloat tris(float x) {\n  float t = fract(x);\n  return 1.0 - smoothstep(0.0, 1.0, abs(2.0 * t - 1.0));\n}\n\nfloat trisn(float x) {\n  float t = fract(x);\n  return 2.0 * (1.0 - smoothstep(0.0, 1.0, abs(2.0 * t - 1.0))) - 1.0;\n}\n\nvec3 hsv2rgb(vec3 c) {\n  vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n  vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n  return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\nfloat Star(vec2 uv, float flare) {\n  float d = length(uv);\n  float m = (0.05 * uGlowIntensity) / d;\n  float rays = smoothstep(0.0, 1.0, 1.0 - abs(uv.x * uv.y * 1000.0));\n  m += rays * flare * uGlowIntensity;\n  uv *= MAT45;\n  rays = smoothstep(0.0, 1.0, 1.0 - abs(uv.x * uv.y * 1000.0));\n  m += rays * 0.3 * flare * uGlowIntensity;\n  m *= smoothstep(1.0, 0.2, d);\n  return m;\n}\n\nvec3 StarLayer(vec2 uv) {\n  vec3 col = vec3(0.0);\n\n  vec2 gv = fract(uv) - 0.5; \n  vec2 id = floor(uv);\n\n  for (int y = -1; y <= 1; y++) {\n    for (int x = -1; x <= 1; x++) {\n      vec2 offset = vec2(float(x), float(y));\n      vec2 si = id + vec2(float(x), float(y));\n      float seed = Hash21(si);\n      float size = fract(seed * 345.32);\n      float glossLocal = tri(uStarSpeed / (PERIOD * seed + 1.0));\n      float flareSize = smoothstep(0.9, 1.0, size) * glossLocal;\n\n      float red = smoothstep(STAR_COLOR_CUTOFF, 1.0, Hash21(si + 1.0)) + STAR_COLOR_CUTOFF;\n      float blu = smoothstep(STAR_COLOR_CUTOFF, 1.0, Hash21(si + 3.0)) + STAR_COLOR_CUTOFF;\n      float grn = min(red, blu) * seed;\n      vec3 base = vec3(red, grn, blu);\n      \n      float hue = atan(base.g - base.r, base.b - base.r) / (2.0 * 3.14159) + 0.5;\n      hue = fract(hue + uHueShift / 360.0);\n      float sat = length(base - vec3(dot(base, vec3(0.299, 0.587, 0.114)))) * uSaturation;\n      float val = max(max(base.r, base.g), base.b);\n      base = hsv2rgb(vec3(hue, sat, val));\n\n      vec2 pad = vec2(tris(seed * 34.0 + uTime * uSpeed / 10.0), tris(seed * 38.0 + uTime * uSpeed / 30.0)) - 0.5;\n\n      float star = Star(gv - offset - pad, flareSize);\n      vec3 color = base;\n\n      float twinkle = trisn(uTime * uSpeed + seed * 6.2831) * 0.5 + 1.0;\n      twinkle = mix(1.0, twinkle, uTwinkleIntensity);\n      star *= twinkle;\n      \n      col += star * size * color;\n    }\n  }\n\n  return col;\n}\n\nvoid main() {\n  vec2 focalPx = uFocal * uResolution.xy;\n  vec2 uv = (vUv * uResolution.xy - focalPx) / uResolution.y;\n\n  vec2 mouseNorm = uMouse - vec2(0.5);\n  \n  if (uAutoCenterRepulsion > 0.0) {\n    vec2 centerUV = vec2(0.0, 0.0); // Center in UV space\n    float centerDist = length(uv - centerUV);\n    vec2 repulsion = normalize(uv - centerUV) * (uAutoCenterRepulsion / (centerDist + 0.1));\n    uv += repulsion * 0.05;\n  } else if (uMouseRepulsion) {\n    vec2 mousePosUV = (uMouse * uResolution.xy - focalPx) / uResolution.y;\n    float mouseDist = length(uv - mousePosUV);\n    vec2 repulsion = normalize(uv - mousePosUV) * (uRepulsionStrength / (mouseDist + 0.1));\n    uv += repulsion * 0.05 * uMouseActiveFactor;\n  } else {\n    vec2 mouseOffset = mouseNorm * 0.1 * uMouseActiveFactor;\n    uv += mouseOffset;\n  }\n\n  float autoRotAngle = uTime * uRotationSpeed;\n  mat2 autoRot = mat2(cos(autoRotAngle), -sin(autoRotAngle), sin(autoRotAngle), cos(autoRotAngle));\n  uv = autoRot * uv;\n\n  uv = mat2(uRotation.x, -uRotation.y, uRotation.y, uRotation.x) * uv;\n\n  vec3 col = vec3(0.0);\n\n  for (float i = 0.0; i < 1.0; i += 1.0 / NUM_LAYER) {\n    float depth = fract(i + uStarSpeed * uSpeed);\n    float scale = mix(20.0 * uDensity, 0.5 * uDensity, depth);\n    float fade = depth * smoothstep(1.0, 0.9, depth);\n    col += StarLayer(uv * scale + i * 453.32) * fade;\n  }\n\n  if (uTransparent) {\n    float alpha = length(col);\n    alpha = smoothstep(0.0, 0.3, alpha); // Enhance contrast\n    alpha = min(alpha, 1.0); // Clamp to maximum 1.0\n    gl_FragColor = vec4(col, alpha);\n  } else {    \n    gl_FragColor = vec4(col, 1.0);\n  }\n}\n`;\n\n\tlet ogl = $state<OglContext | null>(null);\n\tlet mousePos = $state([0.5, 0.5]);\n\tlet smoothMousePos = $state([0.5, 0.5]);\n\tlet mouseActive = $state(0.0);\n\tlet smoothMouseActive = $state(0.0);\n\tlet currentStarSpeed = $state(0);\n</script>\n\n<Canvas\n\tbind:ogl\n\tclass={className}\n\talpha={true}\n\tpremultipliedAlpha={false}\n\tonMouseMove={({ x, y }) => {\n\t\tif (mouseInteraction) {\n\t\t\tmousePos = [x, y];\n\t\t\tmouseActive = 1.0;\n\t\t}\n\t}}\n\tonMouseLeave={() => {\n\t\tif (mouseInteraction) {\n\t\t\tmouseActive = 0.0;\n\t\t}\n\t}}\n\tonMount={(ogl) => {\n\t\tconsole.log('on mpount');\n\t\tif (!transparent) {\n\t\t\treturn;\n\t\t}\n\t\tconst gl = ogl.gl;\n\t\tif (gl) {\n\t\t\tgl.enable(gl.BLEND);\n\t\t\tgl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\n\t\t\tgl.clearColor(0, 0, 0, 0);\n\t\t}\n\t}}\n>\n\t<Program\n\t\tonResize={({ width, height }, program) => {\n\t\t\tprogram.program.uniforms.uResolution.value = [width, height, width / height];\n\t\t}}\n\t\t{vertex}\n\t\t{fragment}\n\t\tuniforms={{\n\t\t\tuTime: { value: 0 },\n\t\t\tuResolution: { value: [0, 0, 0], noUpdate: true },\n\t\t\tuFocal: { value: focal },\n\t\t\tuRotation: { value: rotation },\n\t\t\tuStarSpeed: { value: 0 },\n\t\t\tuDensity: { value: density },\n\t\t\tuHueShift: { value: hueShift },\n\t\t\tuSpeed: { value: speed },\n\t\t\tuMouse: { value: [0, 0] },\n\t\t\tuGlowIntensity: { value: glowIntensity },\n\t\t\tuSaturation: { value: saturation },\n\t\t\tuMouseRepulsion: { value: mouseRepulsion },\n\t\t\tuTwinkleIntensity: { value: twinkleIntensity },\n\t\t\tuRotationSpeed: { value: rotationSpeed },\n\t\t\tuRepulsionStrength: { value: repulsionStrength },\n\t\t\tuMouseActiveFactor: { value: 0.0 },\n\t\t\tuAutoCenterRepulsion: { value: autoCenterRepulsion },\n\t\t\tuTransparent: { value: transparent }\n\t\t}}\n\t\tonUpdate={({ time }, program) => {\n\t\t\tif (!disableAnimation) {\n\t\t\t\tprogram.program.uniforms.uTime.value = time * 0.001;\n\t\t\t\tcurrentStarSpeed = (time * 0.001 * starSpeed) / 10.0;\n\t\t\t\tprogram.program.uniforms.uStarSpeed.value = currentStarSpeed;\n\t\t\t}\n\t\t\t// Smooth mouse interpolation (like in the original)\n\t\t\tconst lerpFactor = 0.05;\n\t\t\tsmoothMousePos[0] += (mousePos[0] - smoothMousePos[0]) * lerpFactor;\n\t\t\tsmoothMousePos[1] += (mousePos[1] - smoothMousePos[1]) * lerpFactor;\n\t\t\tsmoothMouseActive += (mouseActive - smoothMouseActive) * lerpFactor;\n\t\t\tprogram.program.uniforms.uMouseActiveFactor.value = smoothMouseActive;\n\t\t\tprogram.program.uniforms.uMouse.value = smoothMousePos;\n\t\t}}\n\t>\n\t\t<Triangle>\n\t\t\t<Mesh\n\t\t\t\tonUpdate={({ time }, mesh) => {\n\t\t\t\t\tmesh.ogl.renderer?.render({ scene: mesh.mesh });\n\t\t\t\t}}\n\t\t\t/>\n\t\t</Triangle>\n\t</Program>\n</Canvas>\n",
      "type": "registry:component"
    }
  ]
}